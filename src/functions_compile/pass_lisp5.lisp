(defun lisp5_automate()
	'(
		((
			(quote 2)
			(caar 1)
			(cadr 1)
			(cdar 1)
			(cddr 1)
			(caaar 1)
			(caadr 1)
			(cadar 1)
			(caddr 1)
			(cdaar 1)
			(cdadr 1)
			(cddar 1)
			(cdddr 1)
			(caaaar 1)
			(caaadr 1)
			(caadar 1)
			(caaddr 1)
			(cadaar 1)
			(cadadr 1)
			(caddar 1)
			(cadddr 1)
			(cdaaar 1)
			(cdaadr 1)
			(cdadar 1)
			(cdaddr 1)
			(cddaar 1)
			(cddadr 1)
			(cdddar 1)
			(cddddr 1)
			(setq 1)
			(setf 1)
			(funcall 1)
			(and 1)
			(or 1)
			(>= 1)
			(<= 1)
			(+ 1)
			(- 1)
			(* 1)
			(/ 1)
		) 0 0)
		(() 0 1 lisp5_callback)
		(() 2 1)
))

(defun lisp5_callback(code)
	(labels (
		(e_full (c)
			(lisp5_eval_automate c))
		(e (c)
			(car (e_full c)))
		(ec (c)
			(car (e_full (cdr c))))
		(setf_parse (first_param second_param)
			(cond
				((consp first_param)
					(append
						(list 'setf)
						(cdr first_param)
						(list second_param)
						(list (car first_param))
					))
				(T
					`(setf ,first_param ,second_param nil))
			))
		(and_parse(params)
			(cond
				((null (cdr params))
					`(if ,(e (list (car params))) T nil))
				(T
					`(if ,(e (list (car params))) ,(and_parse (cdr params)) nil))
		))
		(or_parse(params)
			(cond
				((null (cdr params))
					`(if ,(e (list (car params))) T nil))
				(T
					`(if ,(e (list (car params))) T ,(or_parse (cdr params))))
		))
		(comp_parse(op c)
			(or_parse (list (cons op c) (cons '= c))))
		(arith_parse(c op next)
			(cond
				((null (cddr c))
					(cons op (append (e_full (list (car c))) (e_full (list (cadr c))))))
				(T
					(cons op (append (e_full (list (car c))) (list (arith_parse (cdr c) next next))))
				)
			))
	)
	(cond 
		((equal (car code) 'caar) `(car (car ,(ec code))))
		((equal (car code) 'cadr) `(car (cdr ,(ec code))))
		((equal (car code) 'cdar) `(cdr (car ,(ec code))))
		((equal (car code) 'cddr) `(cdr (cdr ,(ec code))))
		((equal (car code) 'caaar) `(car (car (car ,(ec code)))))
		((equal (car code) 'caadr) `(car (car (cdr ,(ec code)))))
		((equal (car code) 'cadar) `(car (cdr (car ,(ec code)))))
		((equal (car code) 'caddr) `(car (cdr (cdr ,(ec code)))))
		((equal (car code) 'cdaar) `(cdr (car (car ,(ec code)))))
		((equal (car code) 'cdadr) `(cdr (car (cdr ,(ec code)))))
		((equal (car code) 'cddar) `(cdr (cdr (car ,(ec code)))))
		((equal (car code) 'cdddr) `(cdr (cdr (cdr ,(ec code)))))
		((equal (car code) 'caaaar) `(car (car (car (car ,(ec code))))))
		((equal (car code) 'caaadr) `(car (car (car (cdr ,(ec code))))))
		((equal (car code) 'caadar) `(car (car (cdr (car ,(ec code))))))
		((equal (car code) 'caaddr) `(car (car (cdr (cdr ,(ec code))))))
		((equal (car code) 'cadaar) `(car (cdr (car (car ,(ec code))))))
		((equal (car code) 'cadadr) `(car (cdr (car (cdr ,(ec code))))))
		((equal (car code) 'caddar) `(car (cdr (cdr (car ,(ec code))))))
		((equal (car code) 'cadddr) `(car (cdr (cdr (cdr ,(ec code))))))
		((equal (car code) 'cdaaar) `(cdr (car (car (car ,(ec code))))))
		((equal (car code) 'cdaadr) `(cdr (car (car (cdr ,(ec code))))))
		((equal (car code) 'cdadar) `(cdr (car (cdr (car ,(ec code))))))
		((equal (car code) 'cdaddr) `(cdr (car (cdr (cdr ,(ec code))))))
		((equal (car code) 'cddaar) `(cdr (cdr (car (car ,(ec code))))))
		((equal (car code) 'cddadr) `(cdr (cdr (car (cdr ,(ec code))))))
		((equal (car code) 'cdddar) `(cdr (cdr (cdr (car ,(ec code))))))
		((equal (car code) 'cddddr) `(cdr (cdr (cdr (cdr ,(ec code))))))
		((equal (car code) 'setq) (list 'setf (ec code) '()))
		((equal (car code) 'setf) (setf_parse (e (list (cadr code))) (e (list (caddr code)))))
		((equal (car code) 'funcall) (list 'apply (e (list (cadr code))) (cons 'list (e (list (cddr code))))))
		((equal (car code) 'and) (and_parse (cdr code)))
		((equal (car code) 'or) (or_parse (cdr code)))
		((equal (car code) '>=) (comp_parse '> (e_full (cdr code))))
		((equal (car code) '<=) (comp_parse '< (e_full (cdr code))))
		((equal (car code) '+)  (arith_parse (cdr code) '+ '+))
		((equal (car code) '-)  (arith_parse (cdr code) '- '+))
		((equal (car code) '*)  (arith_parse (cdr code) '* '*))
		((equal (car code) '/)  (arith_parse (cdr code) '/ '*))
		(T (e code)))))

(defun lisp5_eval_automate(code)
	(eval_automate_rc (lisp5_automate) code))

(defun lisp5(compile)
	(create_compile
		(get_all_gfunctions_compile compile)
		(get_all_lfunctions_compile compile)
		(get_all_variables_compile compile)
		(lisp5_eval_automate (get_code_compile compile))
	))
